extend type Query @guard(with: ["api"]) {
    experiments(server_id: ID @eq, device_id: ID @eq): [Experiment!]!
#        @can(ability: "show")
        @all
    experiment(id: ID @eq): Experiment
#        @can(ability: "show")
        @find
}

extend type Mutation @guard(with: ["api"]) {
    runUserExperiment(input: RunUserExperimentInput! @spread): String
#        @can(ability: "create", injectArgs: true)
}

type Experiment {
    id: ID!
    server: Server! @belongsTo
    deviceType: DeviceType! @belongsTo
    device: Device @belongsTo
    software: Software! @belongsTo
    commands: [String]!
    experiment_commands: [ExperimentCommand]!
    has_schema: Boolean
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

type ExperimentCommand {
    name: String!
    arguments: [ExperimentArgument!]!
}

type ExperimentArgument {
    name: String!
    label: String!
    default_value: String
    options: [Option!]
}

type Option {
    name: String!
    value: String!
}

type UserExperiment {
    id: ID!
    user: User! @belongsTo
    experiment: Experiment! @belongsTo
    schema: Schema @belongsTo
    input: [UserExperimentArgs!]!
    output: String!
    note: String
    simulation_time: Int!
    sampling_rate: Int!
    filled: Boolean!
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}

type UserExperimentArgs {
    script_name: String!
    input: [UserExperimentArg!]!
}

type UserExperimentArg {
    name: String!
    value: String!
}

input UserExperimentArgsInput {
    script_name: String!
    input: [UserExperimentArgInput!]!
}

input UserExperimentArgInput {
    name: String!
    value: String!
}

input RunUserExperimentInput @validator {
    experiment_id: ID!
    schema_id: ID
    input: [UserExperimentArgsInput!]!
    software_id: ID!
#    output: String!
    note: String
    simulation_time: Int!
    sampling_rate: Int!
}
